import { getCycle as getCycleJs } from '../src/js-impl/index.js'
import { getCycle as getCycleWasm } from '../src/wasm-impl/index.js'

const xyzs = [
  [1215.345, 63.76021, -88.36909],
  [1168.603, 58.78785, -264.4448],
  [-522.4138, 50.5577, 179.007],
  [1200.11, 52.21733, -116.5676], // n = 4

  [1199.693, 50.9361, -150.1338],
  [1188.34, 44.57008, -151.8202],
  [1187.646, 52.04224, -186.7269],
  [1174.37, 47.10223, -172.6936], // n = 8

  [1146.32, 58.875, -188.4549],
  [1165.891, 53.75002, -211.3325],
  [1205.712, 44.16215, -250.0264],
  [1178.322, 53.75002, -256.9683], // n = 12

  [1176.516, 58.78785, -327.85],
  [1190.365, 63.67992, -359.1949],
  [1142.05, 51.5518, -368.8531],
  [1078.166, 48.72378, -426.2255], // n = 16

  [1001.31, 50.71182, -452.1587],
  [944.674, 51.88483, -402.7614],
  [799.2444, 35.90466, -314.7729],
  [1224.497, 63.1007, -114.3161], // n = 20

  [1232.793, 68.86993, -57.73118],
  [316.0776, 66.3325, 501.9097],
  [3146.0776, 616.3325, 5301.9097],
  // [1000000, 1000000, -1000000], // n = 24
]

const d = []
xyzs.forEach(([ax, ay, az]) => {
  const d2 = []
  xyzs.forEach(([bx, by, bz]) => {
    d2.push(Math.sqrt((ax - bx) ** 2 + (ay - by) ** 2 + (az - bz) ** 2))
  })
  d.push(d2)
})

console.log(`n = ${d.length}`)

console.time('MEC/JS')
console.log(await getCycleJs(d))
console.timeEnd('MEC/JS')

console.time('MEC/WASM')
console.log(await getCycleWasm(d))
console.timeEnd('MEC/WASM')

// JS 22: 3.216s / WASM 22: 3.378
// JS 23: 6.667s / WASM 23: 7.448s
// JS 24: crash / WASM 24: 15.621s
// WASM is *slower*?
